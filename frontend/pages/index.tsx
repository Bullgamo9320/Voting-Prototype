import Image from 'next/image'
import { Inter } from 'next/font/google'
import {useState, useEffect} from 'react'
import { ethers } from 'ethers'
import axios from 'axios'
import { VotingAddress } from '../../contracts'
import Voting from '../contracts/Voting.json'
import Head from 'next/head'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [account, setAccount] = useState('')
  const [chainId, setChainId] = useState(false)
  const [numOfVoters, setNumOfVoters] = useState('')
  const [winner, setWinner] = useState('')
  const [owner, setOwner] = useState('')
  const [result, setResult] = useState({ names: '', medians: '', ranks: ''});
  const [individualResult, setIndividualResult] = useState({ MedianValue: '', Rank: '', ScoreGet: ''});
  const [getVoterScores, setGetVoterScores] = useState([])
  const [ForOwnerGet,setForOwnerGet] = useState([])
  const [VoteEnded, setVoteEnded] = useState(false)
  const mumbaiId = "0x13881";
  const zeroAddress = "0x0000000000000000000000000000000000000000";

  const checkMetaMaskInstalled = async () => {
    const { ethereum } = window;
    if (!ethereum) {
      alert('MetaMaskをインストールしてください！');
    }
  }
  const checkChainId = async () => {
    const { ethereum } = window;
    if(ethereum) {
      const chain = await ethereum.request({method: 'eth_chainId'});
      console.log(`chain: ${chain}`);

      if (chain != mumbaiId) {
        alert('Mumbaiに接続してください')
        setChainId(false)
        return
      } else {
        setChainId(true)
      }
    }
  }

const connectWallet = async () => {
  try{
    const { ethereum } = window;
    const accounts = await ethereum.request({
      method: 'eth_requestAccounts'
    });
    console.log(`account: ${accounts[0]}`)
    setAccount(accounts[0])

    const provider = new ethers.providers.Web3Provider(ethereum);
    const signer = provider.getSigner();
    const votingContract = new ethers.Contract(VotingAddress, Voting.abi, signer);

    try {
      const scores = await votingContract.getVoterScores();
      setGetVoterScores(scores);
    } catch (err) {
      setGetVoterScores([]);
      console.error(err);
    }

    const numOfVoters = await votingContract.numOfVoters();
    console.log(`numOfVoters: ${numOfVoters}`);
    setNumOfVoters(numOfVoters);

    const Owner = await votingContract.owner();
    console.log(`owner: ${Owner}`);
    setOwner(Owner);

    const VoteEnded = await votingContract.voteEnded();
    console.log(`VoteEnded: ${VoteEnded}`);
    setVoteEnded(VoteEnded);


    ethereum.on('accountsChanged', checkAccountChanged);
    ethereum.on('chainChanged', checkChainId);
  } catch (err) {
    console.log(err)
  }
}

const checkAccountChanged = () => {
  setAccount('');
  setOwner('');
  setNumOfVoters('');
  setWinner('');
  setResult({ names: '', medians: '', ranks: ''});
  setIndividualResult({ MedianValue: '', Rank: '', ScoreGet: ''});
  setForOwnerGet([]);
  setGetVoterScores([]);
  setVoteEnded(false);

}



  useEffect(() => {
    checkMetaMaskInstalled()
    checkChainId()
  }, [])
  return (
    <div className={'flex flex-col items-center bg-slate-100 text-blue-900 min-h-screen'}>
      <Head>
        <title>VotingDApp</title>
        <meta name ="description" content="Generated by create next app"></meta>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <h2 className={"text-6xl font-bold my-12 mt-8"}>
        投票アプリへようこそ
      </h2>
      <div className='mt-8 mb-16 hover:rotate-180 hover:scale-105 transition duration-700 ease-in-out'>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='160'
          height='160'
          viewBox='0 0 350 350'
        >
          <polygon points="0 0, 175 0, 175 175, 0 175" stroke="black" fill="#0000ff" />
          <polygon points="0 175, 175 175, 175 350, 0 350" stroke="black" fill="#ffc0cb" />
          <polygon points="175 0, 350 0, 350 175, 175 175" stroke="black" fill="#90EE90" />
          <polygon points="175 175, 350 175, 350 350, 175 350" stroke="black" fill="#ffff00" />
        </svg>
      </div>
      <div className={'flex mt-1'}>
        {account === '' ? (
          <button className={'bg-transparent text-blue-700 font-semibold py-2 px-4 border border-blue-500 rounded hover:border-transparent hover:text-white hover:bg-blue-500 hover:cursor-pointer'}
          onClick={connectWallet}>
          Metamaskを接続
          </button>
        ) : (
          chainId ? (
            <div >
              <div className='px-2 py-2 bg-transparent'>
                <span className="flex flex-col items-left font-semibold">投票者数：{`${numOfVoters}`}</span>
                <span className="flex flex-col items-left font-semibold">投票開始状況：{`${VoteEnded}`}</span>
                <span className="flex flex-col items-left font-semibold">オーナー：{owner}</span>
              </div>
              <div className='px-2 py-2 mb-2 bg-white border border-gray-400'>
                <span className="flex flex-col items-left font-semibold">アドレス：{account}</span>
                {getVoterScores.length > 0 ? (
                  <span className="flex flex-col items-left font-semibold">
                    あなたの投票結果：{`${getVoterScores}`}
                  </span> 
                ) : ( 
                  <span className="flex flex-col items-left font-semibold">
                    あなたの投票結果：未投票
                  </span>
                )
                }
              </div>
            </div>
          ) : (
            <div className='flex flex-col justify-center items-center mb-20 font-bold text-2xl gap-y-3'>
              <div>Mumbaiに接続してください</div>
            </div>)
        )}
      </div>
    </div>
  )
}
